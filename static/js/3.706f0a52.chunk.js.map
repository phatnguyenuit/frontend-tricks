{"version":3,"sources":["../node_modules/@material-ui/core/esm/Typography/Typography.js","pages/CustomSelect/index.tsx"],"names":["defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","Typography","React","forwardRef","props","ref","_props$align","align","classes","className","_props$color","color","component","_props$display","display","_props$gutterBottom","gutterBottom","_props$noWrap","noWrap","_props$paragraph","paragraph","_props$variant","variant","_props$variantMapping","variantMapping","other","_objectWithoutProperties","Component","createElement","_extends","clsx","root","concat","capitalize","withStyles","theme","margin","typography","caption","button","overline","srOnly","position","height","width","overflow","alignLeft","textAlign","alignCenter","alignRight","alignJustify","textOverflow","whiteSpace","marginBottom","colorInherit","colorPrimary","palette","primary","main","colorSecondary","secondary","colorTextPrimary","text","colorTextSecondary","colorError","error","displayInline","displayBlock","name","selection","id","gender","map","label","value","CustomSelectPage","container","spacing","item","xs","direction","maxWidth","defaultTitle","onChange","selected","console","log"],"mappings":"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","file":"static/js/3.706f0a52.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different DOM element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport CustomSelect, {\n  CustomMultipleSelect,\n  BaseItem,\n} from 'components/CustomSelect';\n\ntype Gender = 'male' | 'female';\n\ninterface Person {\n  id: number;\n  name: string;\n  gender: Gender;\n}\n\ninterface MyItem extends BaseItem {\n  gender: Gender;\n}\n\nconst people: Array<Person> = [\n  {\n    id: 1,\n    name: 'Nguyen Tan Phat',\n    gender: 'male',\n  },\n  {\n    id: 2,\n    name: 'Nguyen Tan Tai',\n    gender: 'male',\n  },\n  {\n    id: 3,\n    name: 'Nguyen Thi Gai',\n    gender: 'female',\n  },\n];\n\nconst selection: Array<MyItem> = people.map(({ id, name, gender }) => ({\n  gender,\n  label: name,\n  value: id,\n}));\n\nconst CustomSelectPage = () => {\n  return (\n    <div>\n      <Typography variant=\"h5\">CustomSelect Page</Typography>\n      <Grid container spacing={2}>\n        <Grid item xs>\n          <Grid container direction=\"column\">\n            <Grid item>CustomSelect with single value</Grid>\n            <Grid item>\n              <Box maxWidth={200}>\n                <CustomSelect\n                  selection={selection}\n                  defaultTitle=\"Choose person\"\n                  onChange={(selected) =>\n                    console.log('[CustomSelect]', selected)\n                  }\n                />\n              </Box>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs>\n          <Grid container direction=\"column\">\n            <Grid item>CustomMultipleSelect with multiple values</Grid>\n            <Grid item>\n              <Box maxWidth={300}>\n                <CustomMultipleSelect\n                  selection={selection}\n                  defaultTitle=\"Choose person\"\n                  onChange={(selected) =>\n                    console.log('[CustomMultipleSelect]', selected)\n                  }\n                />\n              </Box>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default CustomSelectPage;\n"],"sourceRoot":""}