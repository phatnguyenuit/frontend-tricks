{"version":3,"sources":["logo.svg","components/Loading/index.tsx","hooks/useLocalStorage.ts","theme/overrides/index.ts","theme/overrides/MuiTableHead.ts","theme/overrides/MuiTableCell.ts","theme/index.ts","constants/pages.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Loading","React","memo","className","displayName","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","String","setItem","stringify","MuiTableHead","root","backgroundColor","MuiTableCell","head","fontWeight","color","theme","createMuiTheme","overrides","pages","foo","component","lazy","name","table","CustomSelect","App","lastPage","setLastPage","page","setPage","onChangePage","useCallback","e","target","Page","CssBaseline","href","rel","src","logo","alt","Grid","container","spacing","alignItems","onChange","variant","Object","entries","map","pageProps","MenuItem","Suspense","fallback","Box","mt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,8OCWrCC,G,MAAUC,IAAMC,MARS,kBAC7B,6BACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,iBAMrBH,EAAQI,YAAc,UAEPJ,QCwBAK,MApCf,SACEC,EACAC,GAC8B,MAGQC,oBAAiB,WACrD,IAEE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GAEzC,OAAOG,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAGP,OADAC,QAAQC,IAAIF,GACLR,MAZmB,mBAGvBW,EAHuB,KAGVC,EAHU,KA8B9B,MAAO,CAACD,EAZS,SAACE,GAChB,IAEED,EAAeE,OAAOD,IAEtBV,OAAOC,aAAaW,QAAQhB,EAAKO,KAAKU,UAAUH,IAChD,MAAOL,GAEPC,QAAQC,IAAIF,O,QC5BH,GACbS,aCD2D,CAC3DC,KAAM,CACJC,gBAAiB,YDAnBC,aEF2D,CAC3DC,KAAM,CACJC,WAAY,OACZC,MAAO,aCCIC,EAJDC,YAAe,CAC3BC,cCkBaC,EAf0B,CACvCC,IAAK,CACHC,UAAWnC,IAAMoC,MAAK,kBAAM,iCAC5BC,KAAM,iBAERC,MAAO,CACLH,UAAWnC,IAAMoC,MAAK,kBAAM,iCAC5BC,KAAM,mBAERE,aAAc,CACZJ,UAAWnC,IAAMoC,MAAK,kBAAM,iCAC5BC,KAAM,iB,iBC0DKG,G,MA5DO,WAAO,IAAD,EACMpC,EAAgB,OAAQ,OAD9B,mBACnBqC,EADmB,KACTC,EADS,OAEF1C,IAAMO,SAASkC,GAFb,mBAEnBE,EAFmB,KAEbC,EAFa,KAGpBC,EAAe7C,IAAM8C,aACzB,SACEC,GAKA,IAAM5B,EAAQC,OAAO2B,EAAEC,OAAO7B,OAC9ByB,EAAQzB,GACRuB,EAAYvB,KAEd,CAACuB,IAEGO,EAAOhB,EAAMU,GAAN,UACb,OACE,kBAAC,IAAD,CAAkBb,MAAOA,GACvB,kBAACoB,EAAA,EAAD,MACA,yBAAKhD,UAAU,OACb,4BAAQA,UAAU,cAChB,uBACEA,UAAU,WACViD,KAAK,sBACLH,OAAO,SACPI,IAAI,uBAEJ,yBAAKC,IAAKC,IAAMpD,UAAU,WAAWqD,IAAI,SAN3C,iBAUF,0BAAMrD,UAAU,eACd,kBAACsD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,UACrC,kBAACH,EAAA,EAAD,CAAMhD,MAAI,GAAV,wBACA,kBAACgD,EAAA,EAAD,CAAMhD,MAAI,GACR,kBAAC,IAAD,CACEW,MAAOwB,EACPiB,SAAUf,EACVgB,QAAQ,YAEPC,OAAOC,QAAQ9B,GAAO+B,KAAI,mCAAE3D,EAAF,KAAO4D,EAAP,YACzB,kBAACC,EAAA,EAAD,CAAU7D,IAAKA,EAAKc,MAAOd,GACxB4D,EAAU5B,YAMrB,kBAAC,IAAM8B,SAAP,CAAgBC,SAAU,kBAAC,EAAD,OACxB,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACrB,EAAD,aCvDMsB,QACW,cAA7B9D,OAAO+D,SAASC,UAEe,UAA7BhE,OAAO+D,SAASC,UAEhBhE,OAAO+D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8e00bd16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './styles.css';\n\nexport const LoadingCompoent = () => (\n  <div>\n    <div className=\"loaderContainer\">\n      <div className=\"loader\"></div>\n    </div>\n  </div>\n);\n\nconst Loading = React.memo(LoadingCompoent);\nLoading.displayName = 'Loading';\n\nexport default Loading;\n","import { useState } from 'react';\n\nfunction useLocalStorage<T>(\n  key: string,\n  initialValue: T,\n): [string, (value: T) => void] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<string>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Save state\n      setStoredValue(String(value));\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import MuiTableHead from './MuiTableHead';\nimport MuiTableCell from './MuiTableCell';\n\nexport default {\n  MuiTableHead,\n  MuiTableCell,\n};\n","import { StyleRules } from '@material-ui/core';\nimport { TableHeadClassKey } from '@material-ui/core/TableHead';\n\nconst MuiTableHead: Partial<StyleRules<TableHeadClassKey>> = {\n  root: {\n    backgroundColor: '#000000',\n  },\n};\n\nexport default MuiTableHead;\n","import { StyleRules } from '@material-ui/core';\nimport { TableCellClassKey } from '@material-ui/core/TableCell';\n\nconst MuiTableCell: Partial<StyleRules<TableCellClassKey>> = {\n  head: {\n    fontWeight: 'bold',\n    color: '#ffffff',\n  },\n};\n\nexport default MuiTableCell;\n","import { createMuiTheme } from '@material-ui/core';\nimport overrides from './overrides';\n\nconst theme = createMuiTheme({\n  overrides\n});\n\nexport default theme;","import React from 'react';\n\ntype PageProps = {\n  name: string;\n  component: ReactLazyComponent;\n};\n\nconst pages: Record<string, PageProps> = {\n  foo: {\n    component: React.lazy(() => import('pages/Foo')),\n    name: 'Foo Component',\n  },\n  table: {\n    component: React.lazy(() => import('pages/Table')),\n    name: 'Table Component',\n  },\n  CustomSelect: {\n    component: React.lazy(() => import('pages/CustomSelect')),\n    name: 'CustomSelect',\n  },\n};\n\nexport default pages;\n","import React from 'react';\n\nimport { MuiThemeProvider } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MuiSelect from '@material-ui/core/Select';\nimport Loading from 'components/Loading';\nimport useLocalStorage from 'hooks/useLocalStorage';\nimport theme from 'theme';\nimport pages from 'constants/pages';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [lastPage, setLastPage] = useLocalStorage('page', 'foo');\n  const [page, setPage] = React.useState(lastPage);\n  const onChangePage = React.useCallback(\n    (\n      e: React.ChangeEvent<{\n        name?: string | undefined;\n        value: unknown;\n      }>,\n    ) => {\n      const value = String(e.target.value);\n      setPage(value);\n      setLastPage(value);\n    },\n    [setLastPage],\n  );\n  const Page = pages[page]['component'];\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            Learn React!\n          </a>\n        </header>\n        <main className=\"App-content\">\n          <Grid container spacing={1} alignItems=\"center\">\n            <Grid item>Choose page to show:</Grid>\n            <Grid item>\n              <MuiSelect\n                value={page}\n                onChange={onChangePage}\n                variant=\"standard\"\n              >\n                {Object.entries(pages).map(([key, pageProps]) => (\n                  <MenuItem key={key} value={key}>\n                    {pageProps.name}\n                  </MenuItem>\n                ))}\n              </MuiSelect>\n            </Grid>\n          </Grid>\n          <React.Suspense fallback={<Loading />}>\n            <Box mt={2}>\n              <Page />\n            </Box>\n          </React.Suspense>\n        </main>\n      </div>\n    </MuiThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}